[buildout]
develop =
    .
    extern/pyon
    extern/coi-services
    extern/coverage-model
    extern/ion-functions

parts =
    project-directories
    python
eggs =
    marine-integrations

unzip = true

show-picked-versions = true

# extends = versions.cfg
versions = versions

# Using our server instead of Pypi for indexing when Pypi goes wrong
# index = http://sddevrepo.oceanobservatories.org/packages/

# When set to false, buildout and its recipe versions must be
# explicitly pinned down and defined.
allow-picked-versions = true

# Tells buildout where to download packages in addition to Pypi.
find-links =
    http://sddevrepo.oceanobservatories.org/releases/

###
#
# set up the directory structure
#
[project-directories]
recipe = z3c.recipe.mkdir
paths = logs
        bin/dsa

# Use this section only if you want to override the
# versions in the parent file.
[versions]
gevent=0.13.7
netCDF4=1.0.9
# Added specific include dir to work with brew install on Mac
[pyzmq]
recipe = zc.recipe.egg:custom
include-dirs = /usr/local/include

# Added specific include dir to work with brew install on Mac
[pyyaml]
recipe = zc.recipe.egg:custom
include-dirs = /usr/local/include

# Added specific include dir to work with brew install on Mac
[gevent]
recipe = zc.recipe.egg:custom
include-dirs = /usr/local/include

# Added specific include dir to work with brew install on Mac
[gevent]
recipe = zc.recipe.egg:custom
include-dirs = /usr/local/include

[h5py]
recipe = zc.recipe.egg:custom
include-dirs = /usr/local/include

# This hack can be taken out once port_agent is stable
[port_agent_hack]
path = ${buildout:directory}/parts/port_agent
recipe = collective.recipe.cmd
on_install = true
on_update = true
cmds =
    rm -rf ${port_agent_hack:path}

[port_agent]
path = ${port_agent_hack:path}
recipe = zc.recipe.cmmi
url = https://github.com/ooici/port_agent/tarball/master
configure-options =
  --prefix=${port_agent:path}

[python]
recipe = zc.recipe.egg
extra-paths = ${buildout:directory}/extern/coi-services
interpreter = python
initialization =
    import os
    os.environ['PATH'] = os.pathsep.join([os.path.join('${port_agent:path}', 'bin'), os.environ.get('PATH', '')])
    # print os.environ.get('PATH')
    from mi.core.log import LoggerManager
    LoggerManager()
scripts =
    nosetests
    pycc
    pyccd
    generate_interfaces
    da_server
    idk_rebase
    package_driver
    start_driver
    switch_driver
    test_driver
    watch_data_log
    cat_data_log
    which_driver
    run_instrument
    dsa/package_driver
    dsa/start_driver
    dsa/switch_driver
    dsa/test_driver
    dsa/which_driver
entry-points =
    nosetests=nose:run_exit
    pycc=scripts.pycc:entry
    pyccd=scripts.pyccd:start_debugging
    generate_interfaces=scripts.generate_interfaces:main
    da_server=mi.idk.scripts.da_server:run
    idk_rebase=mi.idk.scripts.idk_rebase:run
    package_driver=mi.idk.scripts.package_driver:run
    start_driver=mi.idk.scripts.start_driver:run
    switch_driver=mi.idk.scripts.switch_driver:run
    test_driver=mi.idk.scripts.test_driver:run
    watch_data_log=mi.idk.scripts.watch_data_log:run
    cat_data_log=mi.idk.scripts.cat_data_log:run
    which_driver=mi.idk.scripts.which_driver:run
    run_instrument=mi.idk.scripts.run_instrument:run
    dsa/package_driver=mi.idk.scripts.dsa.package_driver:run
    dsa/start_driver=mi.idk.scripts.dsa.start_driver:run
    dsa/switch_driver=mi.idk.scripts.dsa.switch_driver:run
    dsa/test_driver=mi.idk.scripts.dsa.test_driver:run
    dsa/which_driver=mi.idk.scripts.dsa.which_driver:run
eggs =
    coi-services
    ${buildout:eggs}
